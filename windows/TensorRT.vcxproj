<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Python|x64">
      <Configuration>Python</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="src\app\app.cpp" />
    <ClCompile Include="src\app\detection.cpp" />
    <ClCompile Include="src\app\pre_processing.cpp" />
    <ClCompile Include="src\tensorRT\builder\trt_builder.cpp" />
    <ClCompile Include="src\tensorRT\common\cuda_tools.cpp" />
    <ClCompile Include="src\tensorRT\common\ilogger.cpp" />
    <ClCompile Include="src\tensorRT\common\json.cpp" />
    <ClCompile Include="src\tensorRT\common\trt_tensor.cpp" />
    <ClCompile Include="src\tensorRT\import_lib.cpp" />
    <ClCompile Include="src\tensorRT\infer\trt_infer.cpp" />
    <ClCompile Include="src\tensorRT\onnxplugin\onnxplugin.cpp" />
    <ClCompile Include="src\tensorRT\onnxplugin\plugin_binary_io.cpp" />
    <ClCompile Include="src\tensorRT\onnx\onnx-ml.pb.cpp" />
    <ClCompile Include="src\tensorRT\onnx\onnx-operators-ml.pb.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\builtin_op_importers.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\LoopHelpers.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\ModelImporter.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\NvOnnxParser.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\onnx2trt_utils.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\OnnxAttrs.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\onnxErrorRecorder.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\RNNHelpers.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\ShapedWeights.cpp" />
    <ClCompile Include="src\tensorRT\onnx_parser\ShapeTensor.cpp" />
    <ClCompile Include="test\base_test.cpp" />
    <ClCompile Include="test\benchmark.cpp" />
    <ClCompile Include="test\detection_app_test.cpp" />
    <ClCompile Include="test\main.cpp" />
    <ClCompile Include="test\plugin_parser_test.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_bev_nms\trt_batched_bev_nms.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_nms\trt_batched_nms.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_rotated_nms\trt_batched_rotated_nms.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\bicubic_interpolate\trt_bicubic_interpolate.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\batched_nms_kernel.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\deform_conv\trt_deform_conv.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\gather_topk\gather_topk.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_priors\trt_grid_priors.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_sampler\trt_grid_sampler.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\instance_norm\trt_instance_norm.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\modulated_deform_conv\trt_modulated_deform_conv.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_roi_align\trt_multi_level_roi_align.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_rotated_roi_align\trt_multi_level_rotated_roi_align.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\roi_align\trt_roi_align.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scaled_dot_product_attention\scaled_dot_product_attention.cpp" />
    <ClCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scatternd\trt_scatternd.cpp" />
    <None Include="dll_export.def" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="src\app\app.hpp" />
    <ClInclude Include="src\app\detection.h" />
    <ClInclude Include="src\app\pre_processing.h" />
    <ClInclude Include="src\tensorRT\builder\trt_builder.hpp" />
    <ClInclude Include="src\tensorRT\common\cuda_tools.hpp" />
    <ClInclude Include="src\tensorRT\common\ilogger.hpp" />
    <ClInclude Include="src\tensorRT\common\infer_controller.hpp" />
    <ClInclude Include="src\tensorRT\common\json.hpp" />
    <ClInclude Include="src\tensorRT\common\monopoly_allocator.hpp" />
    <ClInclude Include="src\tensorRT\common\preprocess_kernel.cuh" />
    <ClInclude Include="src\tensorRT\common\trt_tensor.hpp" />
    <ClInclude Include="src\tensorRT\infer\trt_infer.hpp" />
    <ClInclude Include="src\tensorRT\onnxplugin\onnxplugin.hpp" />
    <ClInclude Include="src\tensorRT\onnxplugin\plugin_binary_io.hpp" />
    <ClInclude Include="src\tensorRT\onnx\onnx-ml.pb.h" />
    <ClInclude Include="src\tensorRT\onnx\onnx-operators-ml.pb.h" />
    <ClInclude Include="src\tensorRT\onnx\onnxifi.h" />
    <ClInclude Include="src\tensorRT\onnx\onnx_pb.h" />
    <ClInclude Include="src\tensorRT\onnx_parser\builtin_op_importers.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\ImporterContext.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\LoopHelpers.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\ModelImporter.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\NvOnnxParser.h" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnx2trt.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnx2trt_common.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnx2trt_runtime.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnx2trt_utils.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\OnnxAttrs.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnxErrorRecorder.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\onnx_utils.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\RNNHelpers.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\ShapedWeights.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\ShapeTensor.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\Status.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\TensorOrWeights.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\toposort.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\trt_utils.hpp" />
    <ClInclude Include="src\tensorRT\onnx_parser\utils.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\common\modulated_deform_conv\modulated_deform_conv_cpu.h" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_bev_nms\trt_batched_bev_nms.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_nms\trt_batched_nms.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\batched_rotated_nms\trt_batched_rotated_nms.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\bicubic_interpolate\trt_bicubic_interpolate.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\bicubic_interpolate\trt_bicubic_interpolate_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\common_cuda_helper.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\nms\batched_nms_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\nms\cub_helper.h" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\nms\kernel.h" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\trt_plugin_base.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\trt_plugin_helper.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common\trt_serialize.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\deform_conv\trt_deform_conv.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\deform_conv\trt_deform_conv_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\gather_topk\gather_topk.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\gather_topk\gather_topk_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_priors\trt_grid_priors.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_priors\trt_grid_priors_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_sampler\trt_grid_sampler.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_sampler\trt_grid_sampler_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\instance_norm\trt_instance_norm.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\modulated_deform_conv\trt_modulated_deform_conv.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\modulated_deform_conv\trt_modulated_deform_conv_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_roi_align\trt_multi_level_roi_align.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_roi_align\trt_multi_level_roi_align_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_rotated_roi_align\trt_multi_level_rotated_roi_align.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_rotated_roi_align\trt_multi_level_rotated_roi_align_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\roi_align\trt_roi_align.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\roi_align\trt_roi_align_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scaled_dot_product_attention\scaled_dot_product_attention.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scaled_dot_product_attention\scaled_dot_product_attention_kernel.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scatternd\trt_scatternd.hpp" />
    <ClInclude Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scatternd\trt_scatternd_kernel.hpp" />
  </ItemGroup>
  <ItemGroup>
    <CudaCompile Include="src\tensorRT\common\preprocess_kernel.cu" />
    <CudaCompile Include="src\tensorRT\onnxplugin\plugins\DCNv2.cu" />
    <CudaCompile Include="src\tensorRT\onnxplugin\plugins\HSigmoid.cu" />
    <CudaCompile Include="src\tensorRT\onnxplugin\plugins\HSwish.cu" />
    <CudaCompile Include="src\tensorRT\onnxplugin\plugins\ScatterND.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\bicubic_interpolate\trt_bicubic_interpolate_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\allClassNMS.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\allClassRotatedNMS.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\gatherNMSOutputs.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\permuteData.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\sortScoresPerClass.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\nms\sortScoresPerImage.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\common_impl\trt_cuda_helper.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\deform_conv\trt_deform_conv_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\gather_topk\gather_topk_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_priors\trt_grid_priors_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\grid_sampler\trt_grid_sampler_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\modulated_deform_conv\trt_modulated_deform_conv_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_roi_align\trt_multi_level_roi_align_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\multi_level_rotated_roi_align\trt_multi_level_rotated_roi_align_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\roi_align\trt_roi_align_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scaled_dot_product_attention\scaled_dot_product_attention_kernel.cu" />
    <CudaCompile Include="third_party\mmdeploy\csrc\mmdeploy\backend_ops\tensorrt\scatternd\trt_scatternd_kernel.cu" />
  </ItemGroup>
  <ItemGroup>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>15.0</VCProjectVersion>
    <ProjectGuid>{FBF775F5-DAB4-4BC1-97A9-D36301073438}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>TensorRT</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Python|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 11.3.props" />
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Python|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>workspace</OutDir>
    <IntDir>build\$(Platform)\$(Configuration)\</IntDir>
    <IncludePath>./lean/cuda11.3-trt8.4.3.1/include;./lean/opencv4.5.4/include;./lean/protobuf3.11.4/include;./src;./src/tensorRT;./src/tensorRT/common;third_party/amirstan_plugin_for_windows/include;third_party/amirstan_plugin_for_windows/src/plugin/common;$(VC_IncludePath);$(WindowsSDK_IncludePath);./src/app;third_party/googletest/googletest/include;third_party/googletest/googlemock/include</IncludePath>
    <LibraryPath>./lean/opencv4.5.4/lib;./lean/protobuf3.11.4/lib;./lean/cuda11.3-trt8.4.3.1/lib/x64;$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64);third_party/googletest/build/lib/Debug</LibraryPath>
    <TargetName>$(ProjectName)d</TargetName>
    <ExcludePath>$(ExcludePath)</ExcludePath>
    <SourcePath>$(SourcePath)</SourcePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>workspace</OutDir>
    <IntDir>build\$(Platform)\$(Configuration)\</IntDir>
    <IncludePath>./lean/cuda11.3-trt8.2.2.1/include;./lean/opencv4.5.4/include;./lean/protobuf3.11.4/include;./src;./src/tensorRT;./src/tensorRT/common;$(VC_IncludePath);$(WindowsSDK_IncludePath);third_party/mmdeploy/csrc/mmdeploy/backend_ops/tensorrt/;third_party/mmdeploy/csrc/mmdeploy/backend_ops/tensorrt/common;third_party/mmdeploy/csrc/mmdeploy/backend_ops/common;third_party/googletest/googletest/include;third_party/googletest/googlemock/include;./src/app</IncludePath>
    <LibraryPath>./lean/opencv4.5.4/lib;./lean/protobuf3.11.4/lib;./lean/cuda11.3-trt8.2.2.1/lib/x64;$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64)</LibraryPath>
    <SourcePath>$(SourcePath)</SourcePath>
    <ExcludePath>$(CudaToolkitDir);$(ExcludePath)</ExcludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Python|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>workspace</OutDir>
    <IntDir>build\$(Platform)\$(Configuration)\</IntDir>
    <IncludePath>./lean/cuda11.3/include;./lean/cudnn8.0.4/include;./lean/opencv4.5.4/include;./lean/TensorRT8.2.2.1/include;./lean/protobuf3.11.4/include;./src;./src/tensorRT;./src/tensorRT/common;$(VC_IncludePath);$(WindowsSDK_IncludePath);src/tensorRT/amirstan_plugin/src/plugin/common;src/tensorRT/amirstan_plugin/include</IncludePath>
    <LibraryPath>./lean/TensorRT8.2.2.1/lib;./lean/opencv4.5.4/lib;./lean/cudnn8.0.4/lib;./lean/protobuf3.11.4/lib;./lean/cuda11.3/lib;$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64)</LibraryPath>
    <TargetName>libpytrtc</TargetName>
    <TargetExt>.pyd</TargetExt>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <OpenMPSupport>true</OpenMPSupport>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <LanguageStandard>stdcpp14</LanguageStandard>
      <AdditionalIncludeDirectories>./lean/cuda11.3/include</AdditionalIncludeDirectories>
      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>nvinfer_plugin.lib;opencv_world454d.lib;gtest.lib;gmock.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ModuleDefinitionFile>
      </ModuleDefinitionFile>
      <IgnoreSpecificDefaultLibraries>opencv_world346d.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <AdditionalLibraryDirectories>third_party/googletest/build/lib/Debug</AdditionalLibraryDirectories>
    </Link>
    <CudaCompile>
      <GPUDebugInfo>false</GPUDebugInfo>
      <CodeGeneration>compute_61,sm_61</CodeGeneration>
      <Defines>ONNX_ML</Defines>
    </CudaCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>false</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <OpenMPSupport>true</OpenMPSupport>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <LanguageStandard>stdcpp14</LanguageStandard>
      <AdditionalIncludeDirectories>
      </AdditionalIncludeDirectories>
      <LanguageStandard_C>stdc11</LanguageStandard_C>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>nvinfer_plugin.lib;opencv_world454.lib;gtest.lib;gmock.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ModuleDefinitionFile>
      </ModuleDefinitionFile>
      <AdditionalLibraryDirectories>third_party/googletest/build/lib/Release;</AdditionalLibraryDirectories>
      <IgnoreSpecificDefaultLibraries>opencv_world346.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
    </Link>
    <CudaCompile>
      <CodeGeneration>compute_86,sm_86</CodeGeneration>
      <Defines>ONNX_ML</Defines>
      <TargetMachinePlatform>32</TargetMachinePlatform>
      <CudaRuntime>Static</CudaRuntime>
      <AdditionalOptions>-gencode=arch=compute_86,code=sm_86 %(AdditionalOptions)</AdditionalOptions>
      <AdditionalCompilerOptions>
      </AdditionalCompilerOptions>
    </CudaCompile>
    <CudaLink>
      <UseHostLibraryDirectories>true</UseHostLibraryDirectories>
    </CudaLink>
    <CudaLink>
      <UseHostLibraryDependencies>true</UseHostLibraryDependencies>
    </CudaLink>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Python|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>false</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>HAS_PYTHON;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <OpenMPSupport>true</OpenMPSupport>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <LanguageStandard>stdcpp14</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
      <ModuleDefinitionFile>dll_export.def</ModuleDefinitionFile>
      <OutputFile>python/pytrt/$(TargetName)$(TargetExt)</OutputFile>
    </Link>
    <CudaCompile>
      <CodeGeneration>compute_86,sm_86</CodeGeneration>
      <Defines>ONNX_ML</Defines>
    </CudaCompile>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 11.3.targets" />
  </ImportGroup>
</Project>